/*
 * Eden AI API Documentation
 * <a href=\"https://app.edenai.run/user/login\" target=\"_blank\"><img src=\"/static/images/welcome.png\"></a>. # Welcome  Eden AI simplifies the use and integration of AI technologies by providing a unique API connected to the best AI engines and combined with a powerful management platform. The platform covers a wide range of AI technologies: * Vision:  <a href=\"https://www.edenai.co/vision\" target=\"_blank\">www.edenai.co/vision</a>. * Text & NLP: <a href=\"https://www.edenai.co/text\" target=\"_blank\">www.edenai.co/text</a>. * Speech & Audio: <a href=\"https://www.edenai.co/speech\" target=\"_blank\">www.edenai.co/speech</a>. * OCR: <a href=\"https://www.edenai.co/ocr\" target=\"_blank\">www.edenai.co/ocr</a>. * Machine Translation: <a href=\"https://www.edenai.co/translation\" target=\"_blank\">www.edenai.co/translation</a>. * Prediction: <a href=\"https://www.edenai.co/prediction\" target=\"_blank\">www.edenai.co/prediction</a>.  For all the proposed technologies, we provide a single endpoint:  the service provider is only a parameter that can be changed very easily. All the engines available on Eden AI are listed here: www.edenai.co/catalog  # Support & community  ### 1- Support If you have any problems, please contact us at this email address: contact@edenai.co. We will be happy to help you in the use of Eden AI.   ### 2- Community  You can interact personally with other people actively using and working with Eden AI and join our  <a href=\"https://join.slack.com/t/edenai/shared_invite/zt-t68c2pr9-4lDKQ_qEqmLiWNptQzB_6w\" target=\"_blank\">Slack community</a>.  We are always updating our docs, so a good way to always stay up to date is to watch our documentation repo on Github: <a href=\"https://github.com/edenai\" target=\"_blank\">https://github.com/edenai</a>.  ### 3- Blog  We also regularly publish various articles with Eden AI news and technical articles on the different AI engines that exist. You can find these articles here: <a href=\"https://www.edenai.co/blog\" target=\"_blank\">https://www.edenai.co/blog</a>.   # Authentication  ## Create account ![Register](/static/images/register.png)  To create an account, please go to this link: <a href=\"https://app.edenai.run/user/login\" target=\"_blank\">app.edenai.run/user/login</a>. You can create an account with your email address or by using your account on available platforms (Gmail, Github, etc.).   By creating an account with your email address, you will receive a confirmation email with a link to click. Check your spam if needed and contact us if you have any problem: contact@edenai.co  ![Login](/static/images/login.png) ## API key  By going to your account page on the platform: <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">https://app.edenai.run/admin/account</a>, you will have access to your API key to start using the different AI engines offered by Eden AI.   ![api_key](/static/images/api_key.png)  ## Sandbox API key  By going to your account page on the platform: <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">https://app.edenai.run/admin/account</a>, you will also have access to your **Sandbox** API key that will allow you to make free calls and get dummy responses in order to implement and debug Eden AI without consuming credits.   ![api_key](/static/images/sandbox_api_key.png)  # Portal Guide  Eden AI provides a web portal that allows you to do several tasks:  ![portal](/static/images/portal.png)  ### 1- Benchmark and test The platform allows you to easily compare competing engines without having to code. By uploading your data, you have access to the prediction results of the different engines. This gives you a first overview of the performance of AI engines.   ![benchmark](/static/images/benchmark.png)  ### 2- Cost management The <a href=\"https://app.edenai.run/admin/cost-management\" target=\"_blank\">cost management page</a> also allows you to centralize the costs associated with the different engines with various filters to simplify the analysis.   This page also allows you to define monthly budget limits not to be exceeded to secure the use of different AI engines.   ![cost-management](/static/images/cost_management.png) ### 3- Account The <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">account page</a> allows you to change your information and password. It also gives you access to your API key that you can renew if needed.   This page also allows you to add a credit card and to buy with credits to use all the engines offered by Eden AI.   ![account](/static/images/account.png)   # API Guide  Eden AI API has different endpoints that refer to different AI services. The connected providers are thus parameters that the user can easily change. 
 *
 * OpenAPI spec version: v1
 * Contact: contact@edenai.co
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Edenai/InlineResponse20010', 'Edenai/InlineResponse20011', 'Edenai/InlineResponse20012', 'Edenai/InlineResponse20013', 'Edenai/InlineResponse2007', 'Edenai/InlineResponse2008', 'Edenai/InlineResponse2009'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Edenai/InlineResponse20010'), require('../Edenai/InlineResponse20011'), require('../Edenai/InlineResponse20012'), require('../Edenai/InlineResponse20013'), require('../Edenai/InlineResponse2007'), require('../Edenai/InlineResponse2008'), require('../Edenai/InlineResponse2009'));
  } else {
    // Browser globals (root is window)
    if (!root.Edenai) {
      root.Edenai = {};
    }
    root.Edenai.TextApi = factory(root.Edenai.ApiClient, root.Edenai.InlineResponse20010, root.Edenai.InlineResponse20011, root.Edenai.InlineResponse20012, root.Edenai.InlineResponse20013, root.Edenai.InlineResponse2007, root.Edenai.InlineResponse2008, root.Edenai.InlineResponse2009);
  }
}(this, function(ApiClient, InlineResponse20010, InlineResponse20011, InlineResponse20012, InlineResponse20013, InlineResponse2007, InlineResponse2008, InlineResponse2009) {
  'use strict';

  /**
   * Text service.
   * @module Edenai/TextApi
   * @version v1
   */

  /**
   * Constructs a new TextApi. 
   * @alias module:Edenai/TextApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the keywordExtraction operation.
     * @callback module:Edenai/TextApi~keywordExtractionCallback
     * @param {String} error Error message, if any.
     * @param {module:Edenai/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Keyword extraction (also known as keyword detection or keyword analysis) is a text analysis technique that consists of automatically extracting the mostimportant words and expressions in a text.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |----|----|-----| |**Swedish**|`string`|`sw-SW`| |**German**|`string`|`de-DE`| |**Spanish**|`string`|`es-ES`| |**French**|`string`|`fr-FR`| |**Portuguese (Portugal)**|`string`|`pt-PT`| |**English (US)**|`string`|`en-US`| |**Finnish**|`string`|`fn-FN`| |**Italian**|`string`|`it-IT`|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |----|-----|-------| |**Microsoft Azure**|`microsoft`| `v3.1`  |**Amazon Web Services**|`amazon`| `boto3 (v1.15.18)`  |**IBM Watson**|`ibm`| `v1 (2021-08-01)`  |**Lettria**|`lettria`| `v5.5.2` 
     * @param {String} language Language code of text (ex: fr-FR (French), en-US (English), es-ES (Spanish))
     * @param {String} text Text to analyze
     * @param {String} providers Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm'])
     * @param {module:Edenai/TextApi~keywordExtractionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Edenai/InlineResponse2007}
     */
    this.keywordExtraction = function(language, text, providers, callback) {
      var postBody = null;

      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling keywordExtraction");
      }

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling keywordExtraction");
      }

      // verify the required parameter 'providers' is set
      if (providers === undefined || providers === null) {
        throw new Error("Missing the required parameter 'providers' when calling keywordExtraction");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'language': language,
        'text': text,
        'providers': providers
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/pretrained/text/keyword_extraction', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the namedEntityRecognition operation.
     * @callback module:Edenai/TextApi~namedEntityRecognitionCallback
     * @param {String} error Error message, if any.
     * @param {module:Edenai/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Named Entity Recognition (also called entity identification or entity extraction) is an information extraction technique that automatically identifies named entities in a text and classifies them into predefined categories.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |----|----|-----| |**Chinese-Traditional**|`string`|`zh-TW`| |**Swedish**|`string`|`sw-SW`| |**German**|`string`|`de-DE`| |**Dutch (Netherlands)**|`string`|`nl-NL`| |**Spanish**|`string`|`es-ES`| |**French**|`string`|`fr-FR`| |**Chinese-Simplified**|`string`|`zh-CN`| |**Portuguese (Portugal)**|`string`|`pt-PT`| |**English (US)**|`string`|`en-US`| |**Japanese**|`string`|`ja-JP`| |**Finnish**|`string`|`fn-FN`| |**Arabic**|`string`|`ar-XA`| |**Italian**|`string`|`it-IT`| |**Korean**|`string`|`ko-KR`|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |----|-----|-------| |**Amazon Web Services**|`amazon`| `boto3 (v1.15.18)`  |**IBM Watson**|`ibm`| `v1 (2021-08-01)`  |**Google Cloud**|`google`| `v1`  |**Lettria**|`lettria`| `v5.5.2` 
     * @param {String} language Language code of text (ex: fr-FR (French), en-US (English), es-ES (Spanish))
     * @param {String} text Text to analyze
     * @param {String} providers Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm','google'])
     * @param {module:Edenai/TextApi~namedEntityRecognitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Edenai/InlineResponse2008}
     */
    this.namedEntityRecognition = function(language, text, providers, callback) {
      var postBody = null;

      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling namedEntityRecognition");
      }

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling namedEntityRecognition");
      }

      // verify the required parameter 'providers' is set
      if (providers === undefined || providers === null) {
        throw new Error("Missing the required parameter 'providers' when calling namedEntityRecognition");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'language': language,
        'text': text,
        'providers': providers
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/pretrained/text/named_entity_recognition', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the questionAnswering operation.
     * @callback module:Edenai/TextApi~questionAnsweringCallback
     * @param {String} error Error message, if any.
     * @param {module:Edenai/InlineResponse2009} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a question, a set of documents, and some examples, the API generates an answer to the question based on the information in the set of documents.  **AVAILABLE PROVIDERS**   |Name|Value|Version| |----|-----|-------| |**OpenAI Davinci**|`openai_davinci`| `v1`  |**OpenAI Ada**|`openai_ada`| `v1` 
     * @param {String} texts List of texts to analyze
     * @param {String} question Question about the text content
     * @param {String} providers Providers to compare (ex: ['openai'])
     * @param {String} examplesContext example text serving as context
     * @param {String} examples List of question/answer pairs (ex: [['When was Barack Obama elected president?', 'in 2009.'],])
     * @param {Object} opts Optional parameters
     * @param {Number} opts.temperature Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer. (default to 0.0)
     * @param {module:Edenai/TextApi~questionAnsweringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Edenai/InlineResponse2009}
     */
    this.questionAnswering = function(texts, question, providers, examplesContext, examples, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'texts' is set
      if (texts === undefined || texts === null) {
        throw new Error("Missing the required parameter 'texts' when calling questionAnswering");
      }

      // verify the required parameter 'question' is set
      if (question === undefined || question === null) {
        throw new Error("Missing the required parameter 'question' when calling questionAnswering");
      }

      // verify the required parameter 'providers' is set
      if (providers === undefined || providers === null) {
        throw new Error("Missing the required parameter 'providers' when calling questionAnswering");
      }

      // verify the required parameter 'examplesContext' is set
      if (examplesContext === undefined || examplesContext === null) {
        throw new Error("Missing the required parameter 'examplesContext' when calling questionAnswering");
      }

      // verify the required parameter 'examples' is set
      if (examples === undefined || examples === null) {
        throw new Error("Missing the required parameter 'examples' when calling questionAnswering");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'texts': texts,
        'question': question,
        'providers': providers,
        'temperature': opts['temperature'],
        'examples_context': examplesContext,
        'examples': examples
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/pretrained/text/qestion-answer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:Edenai/TextApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:Edenai/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a query and a set of documents or labels, the model ranks each document based on its semantic similarity to the provided query.  **AVAILABLE PROVIDERS**   |Name|Value|Version| |----|-----|-------| |**OpenAI Davinci**|`openai_davinci`| `v1`  |**OpenAI Ada**|`openai_ada`| `v1` 
     * @param {String} texts Texts to search
     * @param {String} query Your query
     * @param {String} providers Providers to compare (ex: ['openai_davinci'])
     * @param {module:Edenai/TextApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Edenai/InlineResponse20010}
     */
    this.search = function(texts, query, providers, callback) {
      var postBody = null;

      // verify the required parameter 'texts' is set
      if (texts === undefined || texts === null) {
        throw new Error("Missing the required parameter 'texts' when calling search");
      }

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling search");
      }

      // verify the required parameter 'providers' is set
      if (providers === undefined || providers === null) {
        throw new Error("Missing the required parameter 'providers' when calling search");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'texts': texts,
        'query': query,
        'providers': providers
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/pretrained/text/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sentimentAnalysis operation.
     * @callback module:Edenai/TextApi~sentimentAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:Edenai/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sentiment analysis API extracts sentiment in a given string of text.Sentiment analysis, also called 'opinion mining',uses natural language processing, text analysis and computational linguistics to identify and detect subjective information from the input text.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |----|----|-----| |**Chinese-Traditional**|`string`|`zh-TW`| |**German**|`string`|`de-DE`| |**Dutch (Netherlands)**|`string`|`nl-NL`| |**Spanish**|`string`|`es-ES`| |**French**|`string`|`fr-FR`| |**Chinese-Simplified**|`string`|`zh-CN`| |**Portuguese (Portugal)**|`string`|`pt-PT`| |**English (US)**|`string`|`en-US`| |**Japanese**|`string`|`ja-JP`| |**Arabic**|`string`|`ar-XA`| |**Italian**|`string`|`it-IT`| |**Korean**|`string`|`ko-KR`|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |----|-----|-------| |**Microsoft Azure**|`microsoft`| `v3.1`  |**Amazon Web Services**|`amazon`| `boto3 (v1.15.18)`  |**IBM Watson**|`ibm`| `v1 (2021-08-01)`  |**Lettria**|`lettria`| `v5.5.2`  |**Connexun**|`connexun`| `v1.0` 
     * @param {String} language Language code of text (ex: fr-FR (French), en-US (English), es-ES (Spanish))
     * @param {String} text Text to analyze
     * @param {String} providers Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm', 'google'])
     * @param {module:Edenai/TextApi~sentimentAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Edenai/InlineResponse20011}
     */
    this.sentimentAnalysis = function(language, text, providers, callback) {
      var postBody = null;

      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling sentimentAnalysis");
      }

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling sentimentAnalysis");
      }

      // verify the required parameter 'providers' is set
      if (providers === undefined || providers === null) {
        throw new Error("Missing the required parameter 'providers' when calling sentimentAnalysis");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'language': language,
        'text': text,
        'providers': providers
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/pretrained/text/sentiment_analysis', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the syntaxAnalysis operation.
     * @callback module:Edenai/TextApi~syntaxAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:Edenai/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Syntax analysis consists principaly in highlighting the structure of a text.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |----|----|-----| |**Chinese-Traditional**|`string`|`zh-TW`| |**Swedish**|`string`|`sw-SW`| |**German**|`string`|`de-DE`| |**Dutch (Netherlands)**|`string`|`nl-NL`| |**Spanish**|`string`|`es-ES`| |**French**|`string`|`fr-FR`| |**Chinese-Simplified**|`string`|`zh-CN`| |**Portuguese (Portugal)**|`string`|`pt-PT`| |**English (US)**|`string`|`en-US`| |**Japanese**|`string`|`ja-JP`| |**Finnish**|`string`|`fn-FN`| |**Arabic**|`string`|`ar-XA`| |**Italian**|`string`|`it-IT`| |**Korean**|`string`|`ko-KR`|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |----|-----|-------| |**Amazon Web Services**|`amazon`| `boto3 (v1.15.18)`  |**IBM Watson**|`ibm`| `v1 (2021-08-01)`  |**Lettria**|`lettria`| `v5.5.2`  |**Google Cloud**|`google`| `v1` 
     * @param {String} language Language code of text (ex: fr-FR (French), en-US (English), es-ES (Spanish))
     * @param {String} text Text to analyze
     * @param {String} providers Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm','google'])
     * @param {module:Edenai/TextApi~syntaxAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Edenai/InlineResponse20012}
     */
    this.syntaxAnalysis = function(language, text, providers, callback) {
      var postBody = null;

      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling syntaxAnalysis");
      }

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling syntaxAnalysis");
      }

      // verify the required parameter 'providers' is set
      if (providers === undefined || providers === null) {
        throw new Error("Missing the required parameter 'providers' when calling syntaxAnalysis");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'language': language,
        'text': text,
        'providers': providers
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/pretrained/text/syntax_analysis', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the textSummarization operation.
     * @callback module:Edenai/TextApi~textSummarizationCallback
     * @param {String} error Error message, if any.
     * @param {module:Edenai/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Text summarization is a technique for extracting the most important sentences from a text in order to create a smaller version of the text.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |----|----|-----|   **AVAILABLE PROVIDERS**   |Name|Value|Version| |----|-----|-------| |**Connexun**|`connexun`| `v1.0`  |**Microsoft Azure**|`microsoft`| `v3.1`  |**MeaningCloud**|`meaningcloud`| `v1.0`  |**OpenAI Ada**|`openai_ada`| `v1`  |**OpenAI Davinci**|`openai_davinci`| `v1` 
     * @param {String} text Text to summarize
     * @param {String} providers Provider to compare (ex: [ 'DataVoice','OpenAI', 'Microsoft'])
     * @param {module:Edenai/TextApi~textSummarizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Edenai/InlineResponse20013}
     */
    this.textSummarization = function(text, providers, callback) {
      var postBody = null;

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling textSummarization");
      }

      // verify the required parameter 'providers' is set
      if (providers === undefined || providers === null) {
        throw new Error("Missing the required parameter 'providers' when calling textSummarization");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'text': text,
        'providers': providers
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/pretrained/text/text_summarization', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
